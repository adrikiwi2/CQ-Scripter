from openai import OpenAI
import os
import base64

def generate_verification_questions(new_description):
    """
    Llama a gpt-4o para generar entre 2 y 5 preguntas de verificación (sí/no) a partir de una descripción
    de diseño de un objeto 3D, usando ejemplos de referencia.
    
    Parámetros:
      - new_design_description: La descripción del diseño del objeto (string).
      - temperature: Controla la diversidad en la respuesta (0.0 es determinista).
    
    Retorna:
      - Un string con las preguntas generadas.
    """
    # Inicializamos el cliente (asegúrate de tener OPENAI_API_KEY configurada)
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    
    # Prompt del sistema (tal y como lo has definido)
    system_prompt = (
        "You will be given a description of how a human-designer would describe the design of a 3D object. "
        "Your job is to provide between 2-5 (Yes or No) questions that I can use to verify how similar (from a topologic and geometric aproach) the generated object is to the description generated by a human. "
        "The questions should be framed such that answering “No” implies that there is a change that needs to be made to the object regarding the verification question. "
        "Here are some important points to note for this task;\n"
        "(1) Do not make up questions if you cannot generate 5 questions based on the description provided.\n"
        "(2) Ensure that your questions only reference entities mentioned within the description.\n"
        "(3) Try not to reference orientation the components of the 3D object. Your generated questions should not ask whether a component is on the \"right\" or \"left\" side as this orientation is relative.\n"
        "(4) Do not reference the size or dimensions of the components of the 3D object. Your generated questions should not ask whether a component is \"big\" or \"small\" as this is relative.\n"
        "I will give you two examples with a language description followed by the appropriate verification questions. Please reference these examples while generating your verification questions."
    )
    
    # Ejemplo 1: Prompt y preguntas generadas
    example_1_prompt = "Extrude a cylindrical plate with a rectangular hole in the middle of it."
    example_1_questions = (
        "1. Is the object cylindrical in shape?\n"
        "2. Does the object have a rectangular hole in the center?\n"
        "3. Is the object extruded in one dimension?"
    )
    
    # Ejemplo 2: Prompt y preguntas generadas
    example_2_prompt = (
        "Design a 3D object that resembles a cone. First draw a sketch of a square and extrude it to create the base of the cone. "
        "Next, draw a sketch of a circle centered at the center of the square base. Extrude this sketch vertically into a conical shape, "
        "such that the diameter of the circle decreases as the height increases. Finally cutout the tip of the cone, such that the tip of the cone is now rectangular in shape."
    )
    example_2_questions = (
        "1- Does the object resemble a cone?\n"
        "2- Is the base of the object square-shaped?\n"
        "3- Is the circular base of the cone centered at the same point as the center of the square base?\n"
        "4- Is the tip of the cone rectangular?\n"
        "5- Does the diameter of the cone decrease as the height increases?"
    )
    
    # Construimos la conversación con los mensajes correspondientes
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": "Example 1:\n" + example_1_prompt},
        {"role": "assistant", "content": example_1_questions},
        {"role": "user", "content": "Example 2:\n" + example_2_prompt},
        {"role": "assistant", "content": example_2_questions},
        {"role": "user", "content": "Now, given the following design description, please provide between 2 to 5 yes/no verification questions that adhere to the above guidelines:\n" + new_description}
    ]
    
    # Llamamos al modelo gpt-4.1
    completion = client.chat.completions.create(
        model="gpt-4o",
        messages=messages
    )
    
    # Retornamos las preguntas generadas
    return completion.choices[0].message.content
def answer_verification_questions(image_paths, questions):

    """
    Llama a gpt-4.1 para responder a un conjunto de preguntas de verificación, utilizando 4 imágenes
    del objeto y un bloque de texto con las preguntas.
    """
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    system_prompt = (
        "Your job is to answer this set of questions with respect to the object I have shared with you. \n"
        "I will be providing 4 images of the object from different orientations so that you can get a complete picture of the 3D object. "
        "Here are some important points regarding your task:\n"
        "(1) Remember that these images are all of the same object from different angles.\n"
        "(2) The answer to each of these questions should always be one of three options: \"Yes\", \"No\" or \"Unclear.\"\n"
        "(3) Your answer should be \"Unclear\" in situations where you are unsure or do not have enough information to answer.\n"
        "Make sure to provide reasoning supporting all your answers.\n"
        "#Your answer should follow the same format as below:\n"
        "1. **Question?**\n"
        "   - **Answer:**\n"
        "   - **Reasoning:**\n\n"
        "2. **Question?**\n"
        "   - **Answer:**\n"
        "   - **Reasoning:**"
    )

    # Preparamos el contenido del mensaje del usuario
    user_content = [{"type": "text", "text": f"Verification Questions:\n{questions}"}]

    # Etiquetas que describen cada perspectiva isométrica
    perspective_labels = [
        "Perspective: Isometric view at 0° (object seen from an inclined angle due to a rotation of ~35° in X and ~45° in Z, then no additional rotation around Z).",
        "Perspective: Isometric view at 90° (object seen from the same inclined angle, rotated 90° around the Z axis).",
        "Perspective: Isometric view at 180° (object seen from the same inclined angle, rotated 180° around the Z axis)."    
    ]

    # Para cada imagen, añadimos la etiqueta y la imagen
    for path, label in zip(image_paths, perspective_labels):
        user_content.append({"type": "text", "text": label})
        with open(path, "rb") as img_file:
            img_bytes = img_file.read()
        b64_img = base64.b64encode(img_bytes).decode("utf-8")
        user_content.append({
            "type": "image_url",
            "image_url": {
                "url": f"data:image/png;base64,{b64_img}",
                "detail": "high"
            }
        })

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_content}
    ]

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=messages,
        temperature=0.0
    )

    return response.choices[0].message.content

def generate_feedback(answers):
    """
    Llama a gpt-4o para generar actionable feedback basado en las respuestas a las preguntas de verificación.
    
    Parámetros:
      - answers: Texto que contiene las respuestas a las preguntas.
      - temperature: Parámetro para controlar la creatividad (0.0 es determinista).
      
    Retorna:
      - Un string con el feedback accionable.
    """
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    
    system_prompt = (
        "Your job is to generate actionable feedback to help correct mistakes in a 3D object. "
        "You will receive the answers to the verification questions, and your task is to summarize these answers into practical corrections that need to be made to the 3D object."
    )
    
    user_input = (
        "The sewers were the answers to the questions I asked to validate a generated 3D object. Can you utilize the answers to these questions to generate actionable feedback that will help the model correct the mistakes in the 3D object?\n\n"
        "Your job is to summarize these answers into practical corrections that need to be made to the 3D object. Please note the following while generating your feedback:\n\n"
        "(1) The corrections should be such that the answers to all questions provided will become \"Yes\" upon applying the suggested corrections.\n"
        "(2) Your corrections should not change the object such that any of the answers that are already \"Yes\" become \"No\".\n"
        "(3) You only want to change the object such that the answers which are \"No\" or \"Unclear\" become \"Yes.\" The summary should be specific and only a few sentences long.\n"
        "(4) Your corrections should not be regarding the quality or orientation of the images.\n"
        "(5) Your feedback should not attempt to fix issues in the scale. DO NOT ask for the addition of additional scale or reference objects.\n"
        "(6) Do not ask for details regarding the size or dimensions of the object.\n"
        "(7) Your corrections should be constructed such that a human designer can use your feedback to update the 3D object so that all questions have \"Yes\" as the answer.\n\n"
        "Here are the answers:\n" + answers
    )
    
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_input}
    ]
    
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=messages
    )
    
    return response.choices[0].message.content